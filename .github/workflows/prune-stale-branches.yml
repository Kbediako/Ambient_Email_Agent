name: Prune Stale Branches

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  prune:
    runs-on: ubuntu-latest
    steps:
      - name: Delete inactive branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const STALE_DAYS = 5;
            const cutoff = new Date(Date.now() - STALE_DAYS * 24 * 60 * 60 * 1000);

            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoData.default_branch;

            const branches = await github.paginate(github.rest.repos.listBranches, {
              owner,
              repo,
              per_page: 100
            });

            for (const branch of branches) {
              if (branch.name === defaultBranch) {
                core.info(`Skipping default branch ${branch.name}`);
                continue;
              }
              if (branch.protected) {
                core.info(`Skipping protected branch ${branch.name}`);
                continue;
              }

              // Skip branches that still have open PRs
              const { data: prs } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                head: `${owner}:${branch.name}`,
                per_page: 1
              });
              if (prs.length > 0) {
                core.info(`Skipping ${branch.name} because it has an open PR`);
                continue;
              }

              // Fetch commit details to check last activity
              const { data: branchDetails } = await github.rest.repos.getBranch({
                owner,
                repo,
                branch: branch.name
              });
              const commit = branchDetails.commit?.commit;
              const authorDate = commit?.author?.date ? new Date(commit.author.date) : null;
              const committerDate = commit?.committer?.date ? new Date(commit.committer.date) : null;
              const lastActivity = [authorDate, committerDate]
                .filter(Boolean)
                .sort((a, b) => b - a)[0];

              if (!lastActivity) {
                core.warning(`Could not determine last activity for ${branch.name}; skipping.`);
                continue;
              }

              if (lastActivity > cutoff) {
                core.info(`Skipping ${branch.name}; last activity ${lastActivity.toISOString()} is within cutoff.`);
                continue;
              }

              try {
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: `heads/${branch.name}`
                });
                core.notice(`Deleted stale branch ${branch.name} (last activity ${lastActivity.toISOString()})`);
              } catch (error) {
                core.warning(`Failed to delete ${branch.name}: ${error.message}`);
              }
            }
